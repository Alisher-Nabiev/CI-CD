name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: flask-cicd-demo
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  REGISTRY: docker.io

jobs:
  lint-test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "version=${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install flake8 pytest pytest-cov bandit safety

      - name: Security scan - Bandit
        run: bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Security scan - Safety
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Lint with flake8
        run: |
          flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Test with pytest
        run: |
          pytest --cov=app --cov-report=xml --cov-report=html --junitxml=pytest.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            pytest.xml
            htmlcov/
            bandit-report.json
            safety-report.json

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    needs: [lint-test, security-scan]
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ needs.lint-test.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.lint-test.outputs.version }}
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ needs.lint-test.outputs.version }}

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.lint-test.outputs.version }}'
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  deploy-staging:
    needs: build-and-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_STAGING }}" > ~/.kube/config

      - name: Deploy to staging
        run: |
          helm upgrade --install flask-app-staging ./helm/flask-app \
            --namespace staging \
            --create-namespace \
            --set image.repository=$DOCKERHUB_USERNAME/$IMAGE_NAME \
            --set image.tag=${{ needs.build-and-push.outputs.image-tag }} \
            --set ingress.hosts[0].host=flask-staging.local \
            --set environment=staging \
            --set replicaCount=1 \
            --wait --timeout=300s

      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=flask-app -n staging --timeout=120s
          kubectl port-forward -n staging svc/flask-app-staging 8080:5000 &
          sleep 5
          curl -f http://localhost:8080/health || exit 1

  deploy-production:
    needs: build-and-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_PROD }}" > ~/.kube/config

      - name: Deploy to production
        run: |
          helm upgrade --install flask-app ./helm/flask-app \
            --namespace production \
            --create-namespace \
            --set image.repository=$DOCKERHUB_USERNAME/$IMAGE_NAME \
            --set image.tag=${{ needs.build-and-push.outputs.image-tag }} \
            --set ingress.hosts[0].host=flask.local \
            --set environment=production \
            --set replicaCount=2 \
            --set autoscaling.enabled=true \
            --set podDisruptionBudget.enabled=true \
            --wait --timeout=600s

      - name: Run production smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=flask-app -n production --timeout=300s
          kubectl port-forward -n production svc/flask-app 8080:5000 &
          sleep 10
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8080/ready || exit 1

      - name: Notify deployment success
        run: |
          echo "ðŸš€ Production deployment successful!"
          echo "Image: $DOCKERHUB_USERNAME/$IMAGE_NAME:${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"

